								Express

Udemy link https://www.udemy.com/course/the-web-developer-bootcamp/learn/lecture/3861598#overview
Express starter link https://expressjs.com/en/starter/basic-routing.html

* <%= %>  these brackets wrap around Javascript in .ejs files that will be rendered.
* <%  %> these brackets wrap around Javascript in .ejs files that are strictly logic.
* <%- %> used for the method include(“pathTo/partialFileName”). This is what is called partials.
* app.set("view engine", "ejs"); Insert into code so that you do not have to specify a file is .ejs when linking files

					Important npm installations

* npm install express - this installs express 
* npm init - this initializes a package.json file in projects
* npm install express --save - this installs express and saves it to package.json as a dependency
* npm install ejs - this allows use of files with .ejs extension.
* npm install body-parser - this allows for form data that is entered by a user to be parsed. Store in a variable to use Example: let bodyParser = require(“body-parser”); Also need this line of code to use body-parser 	app.use(bodyParser.urlencoded({extended: true}));
* npm install request (now deprecated)

					Methods Reference

app.get( “/urlpath”, function(req, res) { } ) - makes a get request
app.post(“/urlpath”, function(req, res) { }  ) - makes a POST request 
app.use( ) - best example is app.use(bodyParser.urlencoded( {extended: true} ))
app.set( ) - best example is app.set (“view engine”, “ejs”).
app.listen( portNumber, function) - sets up server port and tells the server which 		port to use in its first parameter. Second parameter is generally a function with 	console.log(“Server has started”)
res.send( ) - sends response 
res.render( ) - sends réponse to render as html
res.redirect( ) - redirects to /urlpath

ANYTIME A CHANGE IS MADE RELAUNCH NODE FILENAME.JS IN CODE EDITOR TERMINAL UNLESS USING NODEMON. INSTRUCTIONS ON NODEMON BELOW.

let express = require("express");
let app = express();

// Routes

// "/" => "Hi there!"
app.get("/", function(req, res) {
    res.send("Hi there!");
});
// "/bye" => "Goodbye!"
app.get("/bye", function(req,res) {
    res.send("Goodbye!");
})
// "/dog" => "MEOW!"
app.get (“/dog”, function (req, res) {
	res.send(“Meow!”)
})

app.listen(3000, function () {
    console.log("Serving dog demo on port 3000")
});




* Install Express into your project using npm install express

* Import the Express module using let express = require(“express”);

* Express has lots of methods so it is best to store it into a variable. Store the import into a variable  let app = express();

* Define your routes. 

	Examples:

	// "/" => "Hi there!" type / to end of url

app.get("/", function(req, res) {
    res.send("Hi there!");
});

// "/bye" => "Goodbye!"  type /bye to end of url 

app.get("/bye", function(req,res) {
    res.send("Goodbye!");
})

// “/*” => anything type /anything to end of url to receive anything back 

app.get(“/*”, function (req, res) {
	res.send(“Anything”)
})

* ORDER OF ROUTES MATTER!!!! ALWAYS WRITE A /* ROUTE LAST

* /* is useful for displaying some sorts of error message such as the user is on the wrong page

* Req and res are objects. They are request and response. Request contains all the information that triggers the route and response contains the information that we respond with.

* .listen() method starts up the server. First parameter is the port it will start on.

* Start up server by typing into VS Code or whatever code editor app terminal node appfilename.js. Open new tab in browser and type in localhost:portnumberchosen.

			ROUTE PARAMETERS AND PATTERNS

* Use a “ : ” before a parameter to create a pattern. It matches to any matching routes that are available. This avoids having to type out a request for every route and instead use patterns.

 Example:

	app.get(“/r/:subredditName”, function(req, res){
		let subreddit = req.params.subredditName;
   		 res.send(`Welcome to ${subreddit} page`);
	})

* If a user were to type in reddit.com/r/anymatchingsubredditname they would receive the sub they are looking for.

* Store the request parameters into a variable to be able to use it. Example as above: let subreddit = req.params.subredditName.

* If you were to console.log( req ), you would find params as on of its properties. That is why it is being accessed.

* Adding another “ / “ after anymatchingsubredditname will not work. Another pattern must be created.

	 Example:

	app.get(“/r/:subredditName/:comments”, function(req, res){
		res.send(“Welcome to the subreddit comments”)
	})

			Serving Dynamic HTML

Example:

app.get(“/urlparam/:thing”, function (req,res){
	let thing = req.params.thing;
    res.render("home.ejs”, {varNameOverIn.ejsFile: “thing”})
})

* render( ) is used to serve dynamic webpages.

* HTML pages being served using render are not named in the conventional home.html. They must be the .ejs extension

* The html page must be stored in a views directory folder as Express will be looking for that directory.

* npm install ejs --save into working directory to use ejs extensions

* <%=  %>  Using <%= %> inside an .ejs document treats the code inside the tags as Javascript. Declare a variable inside the tags with no parenthesis. Serve it inside req.render ( ) as second parameter. Example: <%= varNameIn.ejsFile %> res.render(“home.ejs”, {varNameIn.ejsFile: “varName”}.

* <%= %> These brackets put the Javascript right into the html to be rendered immediately. Meaning it will appear on the html page. For conditionals such as for loops and if/ else statements use other bracket.

* <% %> These brackets without the = are used to wrap around Javascript flow statements and Javascript logic. Code inside these brackets do not render to the  html page.

Example:
	<% if (statement === “statement”) { %>
		<h1>Write a headline here</h1>
	<% } %>

* The <% %> brackets go around all lines of Javascript but not lines of html (sort of confusing)

				Adding CSS in Express

* Public is a common choice to name CSS directory files

* <link> CSS in .ejs file that needs styling. The href does need to be explicit. Example: Does not need to be <link href=“public/style.css”> it can just be <link href=“style.css”>. But it can just be best to link from root path directory <link href=“/style.css”

* Express doesn’t know to serve all files. It serves views by default but needs to be told to serve up any other files. Including those that contain CSS files.

* To tell the app to have Express use another file directory use .use(express.static( ) )

	Example:
	//these two lines should already be defined within app.js folder before
	let express = require(“express”);
	let app = express( );

	app.use(express.static(“nameOfFolderDirectory”));


					Partials
<%- include (“partialFileName”) %>

* Partials are bits of repeatable code such a the header of an html boil plate or the footer

* Store partials in their own directory under views/partials

* Insert partials into other .ejs files by calling them inside a <%- include (“partials/nameOfPartialFileName”) %> bracket with include before the file name. When linking the partial you need to explicitly direct the file partials/file name.


				POST Requests

Example:
	app.post (“/urlpathroute”, function (req, res) {
		let inputVar = req.body.inputNameAttributeValue;
		res.send(“Confirmation message”)
	})

<form action=“/urlpathroute” method=“POST”
	<input type=“text” name=“” placeholder=“”>
</form>

* name is the most important attribute in an input element. It stores the value of the input into the name attribute value. It is called in a request in the body than the name value. Example: req.body.nameOfAtt 

* To attach the value of input to the req.body you attach the name attribute value to it. Example: If name=“something” then set a variable inside app.post as let variable = req.body.something. This sends the value of input over to the server side

* npm install body-parser - this allows for form data that is entered by a user to be 	parsed onto server side. Body parser requires it to be called in the                                                              app. Example: let bodyParser = require(“body-parser”);

	app.use(bodyParser.urlencoded({extended: true}));
